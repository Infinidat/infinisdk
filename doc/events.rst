Events API
==========

.. note:: WIP

Events are defined as a Read-only collections. An event cannot be changed once it was created, 
but unlike components, the collections itself changes as more events are added.

It is possible for a user to create a custom event.
Such creation is different than the user-object creation since events are constantly generated by system and is not controlled by the user.
This event is treated as any other event, and cannot be modified/deleted later        

Events Queries
~~~~~~~~~~~~~~

The main method for dealing with events is :func:`.find` which allow user to filter and sort events.
Events are identified by a unique *id* and *uuid*. and like user-objects are not cached.   


.. code-block:: python

    event = system.events.find(Event.fields.code='FILESYSTEM_CREATE') # get 'FILESYSTEM_CREATE' events


.TODO : which fields to fetch? 

Events Object
~~~~~~~~~~~~~

Event object is defined in :class:`Event` and is is derived from :class:`ReadOnlyObject`. 
The collection is attached to the system via :class:`EventTypeBinder>`:

.. code-block:: python

    event = system.events.find(Event.filed.code='FILESYSTEM_CREATE') # get 'FILESYSTEM_CREATE' events
    event = system.events.get_last_events(num=100)


Getting Event Attributes
~~~~~~~~~~~~~~~~~~~~~~~~

The methods :func:`.get_filed` :func:`.get_fields` uses the cached data by defaults, to allow fast iteration on fetched objects
 

