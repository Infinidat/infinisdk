Getting Started with InfiniSDK
==============================

Installation
------------

1. Obtain the InfiniSDK package (Usually distributed as a ``.tar.gz`` file)
2. Install the package via ``pip``::

   $ pip install /path/to/infinisdk.tar.gz

.. note:: Depending on your Python installation, the above command might require root privileges

Creating the Infinibox Object
-----------------------------

In your Python interpreter, import the :class:`infinisdk.InfiniBox <infinisdk.infinibox.InfiniBox>` class, and initialize it with your system address:

.. code-block:: python
		
		>>> from infinisdk import InfiniBox
		>>> system = InfiniBox(SYSTEM_ADDRESS)

.. note:: ``SYSTEM_ADDRESS`` can be a hostname for your system's management address, or an IP address

SSL is disabled by default, but can be easily turned on by passing ``use_ssl=True`` to the system constructor:

.. code-block:: python

		>>> system = InfiniBox(SYSTEM_ADDRESS, use_ssl=True)

.. note:: By default, constructing a system does not send any traffic or API calls to the system. Only performing actual actions or queries does.


Authentication
--------------

Authentication information can also be specified via the constructor:

.. code-block:: python

		>>> system = InfiniBox(SYSTEM_ADDRESS, auth=("admin", "password"))

Another way authentication information can be provided is through a ``.ini`` file. Create a file named ``~/.infinidat/infinisdk.ini``, with the following structure::

  [infinibox]
  username=admin
  password=password

Now constructing an InfiniBox object will use the credentials above by default.


Representing API Entities
-------------------------

InfiniSDK provides reflection for objects or entities defined on the system in the form of Pythonic objects. This makes creation, deletion and manipulation easier. Supported objects are defined as Python classes such as :class:`infinisdk.infinibox.volume.Volume` or :class:`infinisdk.infinibox.pool.Pool`, and are accessed more easily through **collection proxies**, such as *system.volumes*, *system.pools* etc. For each supported object type ``X``, there exists ``system.Xs``.

The following examples illustrate how to use those proxies.

Creating Objects
----------------

Creation of objects can be done easily via the :func:`create <infinisdk.core.type_binder.TypeBinder.create>` method. InfiniSDK provides defaults for all required fields that can be autogenerated. For instance, creating a pool can be done via *system.pools.create()*:

.. code-block:: python

		>>> pool = system.pools.create()

.. note:: the *create* shortcut used above is a very thin wrapper around :meth:`the create method of the Pool class <infinisdk.infinibox.pool.Pool.create>`. All it does is automatically assign the "right" system to the first argument.

Object Attributes
-----------------

Once an object is obtained (either by creation or querying as described further down), it can be inspected for its attributes or manipulated in various ways. This is done using getter/setter methods. For most used names, there are direct setters and getters:

.. code-block:: python
		
		>>> pool.update_name('new_name')
		>>> pool.get_name() == 'new_name'
		True


All fields can be accessed via the :meth:`get_field <infinisdk.core.system_object.SystemObject.get_field>` / :meth:`update_field <infinisdk.core.system_object.SystemObject.update_field>` methods:

.. code-block:: python

		>>> pool.update_field('name', 'yet_another_name')
		>>> pool.get_field('name') == 'yet_another_name'
		True

.. _capacities: 

Storage Capacity Handling
-------------------------

Infinipy reflects data sizes using the ``capacity`` module, allowing easy computations and manipulations of data sizes, including units:

.. code-block:: python

		>>> from capacity import GiB

		>>> size = pool.get_virtual_capacity()
		>>> print(size)
		1*TB
		>>> print(size * 2)
		2*TB
		>>> print(size // GiB)
		931

.. seealso:: `documentation for the capacity module <https://github.com/vmalloc/capacity/>`_
		


Querying Objects
----------------

Querying objects of various types is done relatively easily through InfiniSDK. The InfiniBox system exposes collection proxies, which provide iteration and filtering. Here's an example of querying all volumes on a system:

.. code-block:: python

		>>> len(system.volumes)
		0

		>>> list(system.volumes)
		[]

.. seealso:: :ref:`querying`

